"use strict"; define(["jquery", "react", "reactdom"], function (e, a, t) { function n(e) { window.clearTimeout(h), h = window.setTimeout(r, 400, e) } function r(a) { var t = e(a).val(); void 0 == f.state.orgs || f.state.orgs.dataerror || ("" == t ? f.updateState(u(f.state.orgs)) : f.updateState(o(f.state.orgs, t))) } function s() { e(window).resize(function () { i() }) } function i() { var a = e(g).find(".scrollable"); a.css("max-height", "100%"), e(g).is(":visible") && a.length > 0 && a.css("max-height", e(g).height() - e(g).find(".searchDiv").height() + "px") } function l() { e(g).keydown(function (a) { if (e(g).is(":visible")) switch (a.which) { case 13: break; case 38: if (e(a.target).is("a")) { a.preventDefault(); var t = e(g).find("a"), n = e(t).index(e(a.target)); 0 == n ? e(g).find("input").focus() : t[n - 1].focus() } e(a.target).is("input") && (a.preventDefault(), e(g).find("a").last().focus()); break; case 40: if (e(a.target).is("a")) { a.preventDefault(); var t = e(g).find("a"), n = e(t).index(e(a.target)); n == t.length - 1 ? e(g).find("input").focus() : t[n + 1].focus() } e(a.target).is("input") && (a.preventDefault(), e(g).find("a").first().focus()); break; default: e(g).find("input").focus() } }) } function c(n, r) { e.getJSON(n).done(function (e) { f = t.render(a.createElement(w, { initialOrgs: e }), g) }).fail(function () { var e = []; e.dataerror = !0, f = t.render(a.createElement(w, { initialOrgs: e }), g) }).always(function () { r && r() }) } function o(e, a) { var t = !0, n = e.map(function (e) { e.name = d(e.name); var n = !0, r = new RegExp(p(a), "ig"); e.name.search(r) > -1 && (e.name = m(e.name, a), n = !1, t = !1); e.spaces.map(function (e) { e.name = d(e.name); var s = !0; return e.name.search(r) > -1 && (e.name = m(e.name, a), s = !1, n = !1, t = !1), e.hide = s, e }); return e.isresults = !0, e.hide = n, e }); return n.isresults = !0, n.noresults = t, n } function u(e) { var a = e.map(function (e) { e.name = d(e.name), e.hide = !1; e.spaces.map(function (e) { return e.name = d(e.name), e.hide = !1, e }); return e.isresults = !1, e }); return a.isresults = !1, a } function m(e, a) { return e.replace(new RegExp("(" + p(a) + ")", "ig"), "<mark>$1</mark>") } function d(e) { return e.replace(new RegExp("</?mark>", "ig"), "") } function p(e) { return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") } var h, f, g, v = a.createClass({ displayName: "SearchBox", handleChange: function (e) { n(e.target) }, render: function () { return a.createElement("form", { id: "searchBoxForm" }, a.createElement("div", { className: "searchDiv" }, a.createElement("label", null, a.createElement("i", { className: "glyphicon glyphicon-search" }), a.createElement("input", { type: "text", onChange: this.handleChange, placeholder: "Search" })))) } }), E = a.createClass({ displayName: "InnerHtmlSpan", render: function () { var e = { __html: this.props.text }; return a.createElement("span", { className: this.props.className, dangerouslySetInnerHTML: e }) } }), N = a.createClass({ displayName: "Space", render: function () { return a.createElement("li", { className: this.props.className }, a.createElement("a", { href: this.props.url }, a.createElement(E, { text: this.props.name }))) } }), C = a.createClass({ displayName: "Organisation", handleClick: function (e) { e.defaultPrevented = !0 }, render: function () { if (this.props.org.hide) return null; var e = this.props.org.spaces.map(function (e) { return e.hide ? null : a.createElement(N, { key: e.id, name: e.name, url: e.url, className: "spaceli" }) }); return this.props.org.isresults || e.push(a.createElement(N, { key: this.props.org.id + "new", name: "+ New Space", url: "#", className: "spaceli newSpace" })), a.createElement("li", null, a.createElement("div", { className: "orgContainer" }, a.createElement("div", { className: "thumbDiv" }, a.createElement("img", { className: "img-thumbnail", src: this.props.org.image.thumbnail_link, alt: this.props.org.name })), a.createElement("div", { className: "orgDiv" }, a.createElement("a", { href: "#", onClick: this.handleClick }, a.createElement(E, { text: this.props.org.name, className: "orgName" })), a.createElement("ul", null, e)))) } }), y = a.createClass({ displayName: "OrganisationList", render: function () { var e = this.props.orgs.map(function (e) { return a.createElement(C, { key: e.id, org: e }) }); return a.createElement("ul", null, e) } }), w = a.createClass({ displayName: "SpaceSearcher", getInitialState: function () { return { orgs: this.props.initialOrgs } }, updateState: function (e) { this.setState({ orgs: e }) }, componentDidMount: function () { i() }, componentDidUpdate: function () { i(), this.state.orgs.isresults && !this.state.orgs.noresults && e(g).find("a").first().focus() }, render: function () { var e, t = a.createElement("div", { className: "addSpace" }, a.createElement("a", { href: "#", className: "button-new" }, a.createElement("i", { className: "glyphicon glyphicon-plus-sign" }), "Create a new space")); return e = void 0 == this.state.orgs || this.state.orgs.dataerror ? a.createElement("div", { className: "orgContainer" }, a.createElement("div", { className: "errorContainer" }, "An error occurred loading spaces, please try again later."), t) : this.state.orgs.isresults && this.state.orgs.noresults ? a.createElement("div", { className: "orgContainer" }, a.createElement("div", { className: "errorContainer" }, "No spaces found. You can create a new space if you want."), t) : a.createElement(y, { orgs: this.state.orgs }), a.createElement("div", null, a.createElement(v, null), a.createElement("div", { className: "scrollable" }, e)) } }); return { init: function (a, t, n) { g = t, e(g).hasClass("hidden") || e(g).addClass("hidden"), l(), s(), c(a, n) }, showSpaces: function (a) { e(a).hasClass("navbar-open") ? (e(g).addClass("hidden"), e(a).find(".glyphicon").removeClass("glyphicon-menu-up").addClass("glyphicon-menu-down"), e(a).removeClass("navbar-open"), e(a).blur()) : (e(a).find(".glyphicon").removeClass("glyphicon-menu-down").addClass("glyphicon-menu-up"), e(g).removeClass("hidden"), i(), e(a).addClass("navbar-open"), e(g).find("input").focus()) } } });